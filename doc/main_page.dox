/* Define all the groups here: */

/**
 * \addtogroup BFD       BFD Library
 * \addtogroup DNSBL     Domain Name System Black Lists
 * \addtogroup IANA      IANA Registry
 * \addtogroup Geoip     IP-address to location support
 * \addtogroup inet_util IP-address utilities
 * \addtogroup Lua       Lua script support
 * \addtogroup Main      Wsock-trace core functions
 * \addtogroup Misc      Various support functions
 */

/**

\mainpage Wsock-trace
\ingroup  Main

<h2>Introduction</h2>

A drop-in tracing library / DLL for most normal Winsock calls.
It sits between your program and the Winsock library (`ws2_32.dll`).
It works best for MSVC since the stack-walking code requires the program's
<b>PDB</b> symbol-file to be present. And unfortunately MinGW/CygWin doesn't produce
PDB-symbols (GNU-debugger instead relies on the archaic <b>BFD</b> library). So currently,
the MinGW, CygWin and OpenWatcom targets will only show raw addresses for the traced
functions.

\image html screenshot_ahost-msdn-com-win10.png

<h2>Options & Features</h2>

\li *Colourised trace* of the Winsock calls with function parameters and return
    values. The colours are configurable.

\li *Runtime caller information*: Using Microsoft's *dbghelp* (or *psapi*) APIs
  together with the programs *PDB*-file, the filename, line-number of the calling
  function-name is shown. In the above example, [`WSAStartup()`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms742213(v=vs.85).aspx)
  is called from `ahost.c`, line 67. Which should be 59 bytes into the `main()` function.
  This should be **[here](https://github.com/c-ares/c-ares/blob/master/ahost.c#L67)**.

\li *Precise Timestamps*: All trace-lines starts with a precise timestamp obtained
  from [`QueryPerformanceCounter()`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms644904(v=vs.85).aspx).<br>
  The timestamp is controlled by `trace_time` in the
  [`wsock_trace`](https://github.com/gvanem/wsock-trace/blob/master/wsock_trace#L32)
  config-file.

\li *Extension functions*: Winsock has several Microsoft-specific extension functions
  (like [`AcceptEx()`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms737524.aspx)
  and [`ConnectEx()`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms737606.aspx)).<br>
  Wsock-trace is able to trace these too.

\li *IP-Country* information thanks to the **[MaxMind](http://www.maxmind.com)** Lite databases.
  Thanks to the **[Tor-project](https://gitweb.torproject.org/tor.git/plain/src/config/)**
  for a simplified CSV version of these MaxMind GeoIP-databases.
  (using the CSV files [`geoip`](https://github.com/gvanem/wsock-trace/blob/master/wsock_trace#L157)
  and [`geoip6`](https://github.com/gvanem/wsock-trace/blob/master/wsock_trace#L158)
  are always enabled).

\li *IP-Location* information from  **[IP2Location](https://github.com/chrislim2888/IP2Location-C-Library)**.
  (this is contolled by `USE_IP2LOCATION = 1` in the makefiles).<br>
  The above `Mountain View/California` is Google's well-known location.<br>
  Many thanks to IP2Location [**[3]**](#footnotes) for their data-bases.

\li *Domain Name System-based Blackhole List*
  (**[DNSBL](https://en.wikipedia.org/wiki/DNSBL)**) support: with the help of
  DROP-files from the **[Spamhaus](http://www.spamhaus.org/drop/)** project,
  it can detect IPv4 / IPv6-addresses uses by spammers and cyber-criminals.
  The more potent Spamhaus **[BGPCC](https://www.spamhaus.org/bgpf/)** is on the *to-do* list.

\li **[LuaJIT]( https://github.com/LuaJIT/LuaJIT.git)** script support is very
  preliminary at the moment. The idea is that `.lua` scripts could change the
  behaviour of Wsock-trace at runtime without rebuilding it.

*/
