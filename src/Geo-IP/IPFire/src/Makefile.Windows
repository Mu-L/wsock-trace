#
# GNU Makefile for libloc. Supporting MSVC or clang-cl only.
#
# By G. Vanem <gvanem@yahoo.no> 2020 - 2025.
#
# Ref: https://git.ipfire.org/pub/git/location/libloc.git
#      https://location.ipfire.org/how-to-use
#
# From '../configure.ac' and 'AC_INIT()':
#
LIBLOC_MAJOR = 0
LIBLOC_MINOR = 9
LIBLOC_MICRO = 17
VERSION      = $(LIBLOC_MAJOR).$(LIBLOC_MINOR).$(LIBLOC_MICRO)

TODAY     := $(shell date.exe +%d-%B-%Y)
THIS_FILE := $(firstword $(MAKEFILE_LIST))
comma     := ,

#
# Used in generated Python scripts.
# This becomes the default database and .pem directory.
#
DATABASE_DIR = $(realpath .)
ABS_SRCDIR   = $(realpath ..)

#
# Use CRT debug (and 'ENABLE_DEBUG').
#
USE_CRT_DEBUG ?= 0

#
# Enable Lua-JIT support?
#
USE_LUA ?= 1
LUA_ROOT = ../../../LuaJIT
LUA_LIB  = $(LUA_ROOT)/lib/luajit_static-$(CPU).lib

#
# Use Winsock-trace library.
#
USE_WSOCK_TRACE ?= 0

#
# Use OpenSSL?
#
# Otherwise just fake it in a non-obstructive way:
# any macro in 'fake-OpenSSL/openssl/fake-it.h' will cause a
# signature operation in 'test-signature.exe' to fail.
#
USE_OPENSSL  ?= 1
OPENSSL_ROOT ?= f:/MinGW32/src/inet/Crypto/OpenSSL

#
# For C-preprocessing.
#
USE_ASTYLE ?= 1

#
# Set 'USE_STATIC_LIBLOC=1' to link with '$(STATIC_LIB)' for the test programs.
# Otherwise link to '$(IMPORT_LIB)'.
#
USE_STATIC_LIBLOC ?= 1

#
# Use 'cl -MP ...'
#
USE_MP_COMPILE ?= 1

#
# Warn on undefined variables.
#
MAKEFLAGS += --warn-undefined-variables

#
# Use correct prefix:
#
ifeq ($(CPU),x64)
  uscore :=
  bits   := 64
else
  uscore := _
  bits   := 32
endif

define Usage

  Usage: "$(MAKE) -f $(THIS_FILE) CC=[cl | clang-cl] [all | clean | realclean]"
  Specify CC=cl       for MSVC
  Specify CC=clang-cl for clang-cl
endef

export CL=

OBJ_DIR = objects

ifneq ($(CC),cl)
  ifneq ($(CC),clang-cl)
    $(error $(Usage))
  endif
endif

c_to_obj = $(addprefix $(OBJ_DIR)/$(strip $(2)), \
             $(notdir $(1:.c=.obj)))

LIBLOC_SRC = address.c      \
             as.c           \
             as-list.c      \
             country.c      \
             country-list.c \
             database.c     \
             libloc.c       \
             network.c      \
             network-list.c \
             network-tree.c \
             resolv.c       \
             stringpool.c   \
             writer.c       \
             win_str.c      \
             win_mmap.c

TEST_SRC = test-address.c      \
           test-as.c           \
           test-country.c      \
           test-database.c     \
           test-libloc.c       \
           test-network-list.c \
           test-network.c      \
           test-signature.c    \
           test-stringpool.c

TEST_PROGS = $(TEST_SRC:.c=.exe)

PY_D =

CFLAGS = -nologo -W4 -Zi -GS-       \
         -D_CRT_SECURE_NO_WARNINGS  \
         -D_CRT_NONSTDC_NO_WARNINGS \
         -D_CRT_OBSOLETE_NO_WARNINGS

LDFLAGS = -debug -map -verbose -nologo -incremental:no -nodefaultlib:uuid.lib
RCFLAGS = -nologo

STATIC_LIB = libloc-$(CPU).lib
IMPORT_LIB = libloc_imp-$(CPU).lib

ifeq ($(CC),clang-cl)
  RCFLAGS += -D__clang__
else
  RCFLAGS += -D_MSC_VER
endif

ifeq ($(USE_CRT_DEBUG),1)
  CFLAGS += -MDd -RTCu -RTCs    \
            -D_CRTDBG_MAP_ALLOC \
            -DENABLE_DEBUG      \
            -FIcrtdbg.h
  PY_D = _d
else
  CFLAGS += -MD -Ot
endif

#
# What to build:
#
TARGETS = $(STATIC_LIB)     \
          $(IMPORT_LIB)     \
          libloc-$(CPU).dll \
          $(TEST_PROGS)

CFLAGS += -I. -I./libloc/windows         \
          -DLIBLOC_PRIVATE               \
          -D_WIN32_WINNT=0x601           \
          -DABS_SRCDIR=\"$(ABS_SRCDIR)\" \
          -DLIBLOC_DEFAULT_DATABASE_PATH=\"$(DATABASE_DIR)\"

ifeq ($(USE_OPENSSL),1)
  CFLAGS      += -I$(OPENSSL_ROOT)/include
  OPENSSL_LIBS = $(OPENSSL_ROOT)/lib/libcrypto_imp-$(CPU).lib
else
  CFLAGS += -I../../.. \
            -I./fake-OpenSSL
  OPENSSL_LIBS =
endif

#
# Warning control.
#
ifeq ($(CC),clang-cl)
  CFLAGS += -ferror-limit=5                  \
            -Wno-unused-parameter            \
            -Wno-unused-variable             \
            -Wno-visibility                  \
            -Wno-sign-compare                \
            -Wno-missing-field-initializers  \
            -Wno-incompatible-pointer-types  \
            -Wno-cast-function-type-mismatch \
            -Wno-single-bit-bitfield-constant-conversion
else
  CFLAGS += -wd4018 -wd4100 -wd4101 -wd4115 -wd4146 -wd4152 -wd4189 -wd4201 -wd4244 -wd4267 -wd4702

  #
  # For warnings such as:
  #   python/database.c(633): warning C4232: nonstandard extension used: 'tp_iter':
  #   address of dllimport 'PyObject_SelfIter' is not static, identity not guaranteed
  #
  CFLAGS += -wd4232
endif

#
# External lib(s) to use for 'libloc-$(CPU).dll'.
# And possibly 'test-*.exe' if 'USE_STATIC_LIBLOC = 1'.
#
ifeq ($(USE_WSOCK_TRACE),1)
  CFLAGS += -DUSE_WSOCK_TRACE
  WS2_32  = wsock_trace-$(CPU).lib
else
  WS2_32 = ws2_32.lib
endif

LIBLOC_OBJ = $(call c_to_obj, $(LIBLOC_SRC),)

PY_SRC = $(addprefix python/, \
           as.c               \
           country.c          \
           database.c         \
           locationmodule.c   \
           network.c          \
           writer.c)

PY_OBJ = $(call c_to_obj, $(PY_SRC), py/)

ifeq ($(USE_LUA),1)
  TARGETS += lua_install/location.dll \
             lua_install/location-lua.lib  # No real need for this

  CFLAGS += -I$(LUA_ROOT)/src

  LUA_SRC = $(addprefix lua/, \
              as.c            \
              country.c       \
              database.c      \
              location.c      \
              network.c)

  LUA_OBJ = $(call c_to_obj, $(LUA_SRC), lua/)

  #
  # Must compile '$(LIBLOC_SRC)' without OpenSSL support
  #
  LUA_OBJ += $(call c_to_obj, $(LIBLOC_SRC), libloc-lua/)
else
  LUA_SRC =
endif

all: libloc/version.h $(TARGETS) py3_module epilogue

epilogue:
	$(call green_msg, \nWelcome to libloc library and test programs.)
	$(call green_msg, You could do a $(BRIGHT_WHITE)make -f $(THIS_FILE) CC=$(CC) \
	                  [ run_tests | run_export_test | run_dedup_test | run_lua_test ] $(BRIGHT_GREEN)too.)

$(OBJ_DIR)            \
$(OBJ_DIR)/lua        \
$(OBJ_DIR)/libloc-lua \
$(OBJ_DIR)/py         \
lua_install           \
lua_install/luaunit   \
py3_install           \
py3_install/location:
	mkdir --parents $@

.SECONDARY: $(OBJ_DIR)/test-address.obj      \
            $(OBJ_DIR)/test-as.obj           \
            $(OBJ_DIR)/test-country.obj      \
            $(OBJ_DIR)/test-database.obj     \
            $(OBJ_DIR)/test-libloc.obj       \
            $(OBJ_DIR)/test-network.obj      \
            $(OBJ_DIR)/test-network-list.obj \
            $(OBJ_DIR)/test-stringpool.obj   \
            $(OBJ_DIR)/test-signature.obj

$(STATIC_LIB): $(LIBLOC_OBJ)
	lib -nologo -out:$@ $(LIBLOC_OBJ)
	@echo

$(IMPORT_LIB): libloc-$(CPU).dll

libloc-$(CPU).dll: $(OBJ_DIR)/libloc.def $(LIBLOC_OBJ) $(OBJ_DIR)/libloc.res | $(OBJ_DIR)/check-for-unused-libs.py
	$(call link_DLL, $@, -def:$^ dnsapi.lib $(OPENSSL_LIBS) $(WS2_32), $(IMPORT_LIB))

libloc/version.h: $(THIS_FILE)
	$(call generate_c, $@)
	$(file >> $@, #ifndef LIBLOC_VERSION_H)
	$(file >> $@, #define LIBLOC_VERSION_H)
	$(file >> $@, #define LIBLOC_MAJOR_VER  $(LIBLOC_MAJOR))
	$(file >> $@, #define LIBLOC_MINOR_VER  $(LIBLOC_MINOR))
	$(file >> $@, #define LIBLOC_MICRO_VER  $(LIBLOC_MICRO))
	$(file >> $@, #define PACKAGE_VERSION  "$(LIBLOC_MAJOR).$(LIBLOC_MINOR).$(LIBLOC_MICRO)")
	$(file >> $@, #endif)

$(OBJ_DIR)/libloc.def: $(STATIC_LIB) $(THIS_FILE) | $(OBJ_DIR)
	$(call generate, $@, ;)
	@echo -e 'LIBRARY libloc-$(CPU).dll\nEXPORTS'               >> $@
	nm $< | grep ' T $(uscore)loc_' | sed 's/^.* $(uscore)/  /' >> $@
	@echo

$(OBJ_DIR)/libloc.rc: $(THIS_FILE) | $(OBJ_DIR)
	$(call generate_c, $@)
	$(file >> $@, #define RC_FILENAME     "libloc-$(CPU).dll")
	$(file >> $@, #define RC_DESCRIPTION  "A library to determine the location of someone on the Internet.")
	$(file >> $@, $(RC_COMMON))
	@echo

$(OBJ_DIR)/_location.rc: $(THIS_FILE) | $(OBJ_DIR)
	$(call generate_c, $@)
	$(file >> $@, #define RC_FILENAME     "_location.pyd")
	$(file >> $@, #define RC_DESCRIPTION  "Python3 module for 'libloc-$(CPU).dll'.")
	$(file >> $@, $(RC_COMMON))
	@echo

$(OBJ_DIR)/location.rc: $(THIS_FILE) | $(OBJ_DIR)
	$(call generate_c, $@)
	$(file >> $@, #define RC_FILENAME     "location.dll")
	$(file >> $@, #define RC_DESCRIPTION  "LuaJIT module for 'libloc-$(CPU).dll'.")
	$(file >> $@, $(RC_COMMON))
	@echo

ifeq ($(CC)-$(USE_MP_COMPILE),cl-1)
  $(LIBLOC_OBJ): $(LIBLOC_SRC) | $(OBJ_DIR) $(CC).args
	$(call C_compile_MP, $(OBJ_DIR)\\, $(LIBLOC_SRC))
endif

$(OBJ_DIR)/%.obj: %.c | $(OBJ_DIR) $(CC).args
	$(call C_compile, $@, $<)

$(CC).args: $(THIS_FILE)
	$(call green_msg, All CFLAGS are in $@)
	$(call create_resp_file, $@, -c $(CFLAGS))

%.i: %.c FORCE $(OBJ_DIR)/cpp-filter.py $(CC).args
	$(call C_preprocess, $@, $<)

FORCE:

$(OBJ_DIR)/cpp-filter.py: $(THIS_FILE) | $(OBJ_DIR)
	$(call generate_py,$@,$(CPP_FILTER_PY))

$(OBJ_DIR)/check-for-unused-libs.py: $(THIS_FILE) | $(OBJ_DIR)
	$(call generate_py,$@,$(CHECK_FOR_UNUSED_LIBS_PY))

#
# Must use Python3.
# Use the Python launcher to find the default version 3 Python.
#
# And with 'USE_CRT_DEBUG = 1', use the debug-version of Python3.
#
PYTHON ?= py -3
PY_ROOT = $(subst \,/,$(shell $(PYTHON) -c "import sys; print(sys.prefix)"))

$(OBJ_DIR)/py/%.obj: python/%.c | $(OBJ_DIR)/py $(CC).args
	$(call C_compile, $@, -I$(PY_ROOT)/include $<)

py_%.i: python/%.c FORCE $(OBJ_DIR)/cpp-filter.py $(CC).args
	$(call C_preprocess, $@, -I$(PY_ROOT)/include $<)

#
# LuaJIT stuff:
#
lua_install/location-lua.lib: lua_install/location.dll

lua_install/location.dll: $(LUA_OBJ) $(OBJ_DIR)/location.res $(LUA_ROOT)/lib/luajit_static-$(CPU).lib | $(OBJ_DIR)/check-for-unused-libs.py lua_install
	$(call link_DLL, $@, -export:luaopen_location $^ dnsapi.lib $(OPENSSL_LIBS) $(WS2_32), lua_install/location-lua.lib)

$(OBJ_DIR)/lua/%.obj: lua/%.c | $(OBJ_DIR)/lua $(CC).args
	$(call C_compile, $@, $<)

$(OBJ_DIR)/libloc-lua/%.obj: %.c | $(OBJ_DIR)/libloc-lua $(CC).args
	$(call C_compile, $@, $<)

lua_%.i: %.c FORCE $(OBJ_DIR)/cpp-filter.py $(CC).args
	$(call C_preprocess, $@, $<)

lua_%.i: lua/%.c FORCE $(OBJ_DIR)/cpp-filter.py $(CC).args
	$(call C_preprocess, $@, $<)

run_lua_test: lua_module                 \
              install_luaunit            \
              $(LUA_ROOT)/bin/luajit.exe \
              lua_install/test.lua
	$(call green_msg, Running $(BRIGHT_WHITE)$(LUA_ROOT)/bin/luajit.exe lua_install/test.lua)
	@export LOC_LOG=6                                              \
	 export LUA_TRACE=0                                            \
	 export LUA_CPATH=$(realpath lua_install)/?.dll                \
	 export LUA_PATH=$(realpath lua_install)/luaunit/?.lua         \
	 export TEST_DATABASE=$(realpath ../data/database.db)          \
	 export TEST_SIGNING_KEY=$(realpath ../data/signing-key.pem) ; \
	$(LUA_ROOT)/bin/luajit.exe lua_install/test.lua
	@echo

lua_install/test.lua: ../tests/lua/main.lua.in $(THIS_FILE)
	$(call generate, $@, --)
	$(file >> $@, -- Generated from $<)
	sed -e 's|#!/usr/bin/lua@LUA_VERSION@||' \
	    -e 's|.*db:verify.*|-- Not for Windows|' < $< >> $@
	@echo

lua_module: lua_install/location.dll
	cp --update $(LUA_DLL_FILES) lua_install/
	@echo

install_luaunit: lua_install/luaunit
  ifeq ($(wildcard lua_install/luaunit/*),)
	$(call green_msg, Cloning $(BRIGHT_WHITE)https://github.com/bluebird75/luaunit.git)
	- git clone https://github.com/bluebird75/luaunit.git $<
	@echo
  else
	$(call green_msg, Assuming $(BRIGHT_WHITE)https://github.com/bluebird75/luaunit.git $(BRIGHT_GREEN)was cloned OK)
  endif

lua_module: lua_install/location.dll lua_install

$(LUA_ROOT)/bin/luajit.exe $(LUA_ROOT)/lib/luajit_static-$(CPU).lib:
	$(MAKE) --directory $(LUA_ROOT) --file Makefile.Windows CC=$(CC) all

#
# Misc stuff:
#
$(OBJ_DIR)/%.res: $(OBJ_DIR)/%.rc
	$(call create_res_file, $@, $<)

ifeq ($(USE_STATIC_LIBLOC),1)
  test-%.exe: $(OBJ_DIR)/test-%.obj $(STATIC_LIB) | $(OBJ_DIR)/check-for-unused-libs.py
	$(call link_EXE, $@, $^ $(OPENSSL_LIBS) $(WS2_32))

else
  test-%.exe: $(OBJ_DIR)/test-%.obj $(IMPORT_LIB) | $(OBJ_DIR)/check-for-unused-libs.py
	$(call link_EXE, $@, $^ $(WS2_32))
endif

run_tests runtests: $(TEST_PROGS)
	for p in $^ ; do                            \
	    echo -e "\n\e[1;32mRunning $$p:\e[0m" ; \
	    ./$$p ;                                 \
	    if [ $$? -ne 0 ]; then                  \
	       echo -e "\e[1;31mFailed!\e[0m" ;     \
	  fi ;                                      \
	done

run_export_test: py3_module
	export PYTHONPATH=$(realpath py3_install) ; \
	export TEST_DATA_DIR=$(realpath ../data)  ; \
	$(PYTHON) ../tests/python/test-export.py

run_dedup_test: py3_module
	export PYTHONPATH=$(realpath py3_install) ; \
	$(PYTHON) ../tests/python/networks-dedup.py

#
# Rules for building the Python3 module.
#
# Note: there is no 'make install'. So manually copy from './py3_install'
#       to where-ever you like.
#
PY_FILES = $(addprefix python/location/, \
             __init__.py                 \
             database.py                 \
             downloader.py               \
             export.py                   \
             i18n.py                     \
             logger.py)

PY_GEN_FILES = $(addprefix py3_install/, \
                 _location.pyd           \
                 location.py             \
                 location-importer.py)

$(PY_GEN_FILES): $(THIS_FILE)

#
# Needed by 'py3_install/_location.pyd'
#
PY_DLL_FILES = libloc-$(CPU).dll

#
# Needed by 'lua_install/location.dll'
#
LUA_DLL_FILES = libloc-$(CPU).dll

#
# These could be handy for debugging
#
PY_DLL_FILES  += libloc-$(CPU).pdb
LUA_DLL_FILES += libloc-$(CPU).pdb

py3_module: py3_install py3_install/location $(PY_GEN_FILES) libloc-$(CPU).dll
	cp --update $(PY_DLL_FILES)  py3_install
	cp --update $(PY_FILES)      py3_install/location
	@echo

PY_LIB = $(PY_ROOT)/libs/python3$(PY_D).lib

py3_install/_location.pyd: $(PY_OBJ) $(IMPORT_LIB) $(OBJ_DIR)/_location.res | py3_install $(OBJ_DIR)/check-for-unused-libs.py
	$(call link_PYD, $@, $(PY_OBJ) $(IMPORT_LIB) $(OBJ_DIR)/_location.res $(PY_LIB))

py3_install/location.py: scripts/location.in
	$(call green_msg, Generating $@)
	sed -e 's|@VERSION@|$(VERSION)|' -e 's|@databasedir@|$(DATABASE_DIR)|' < $< > $@
	@echo

py3_install/location-importer.py: scripts/location-importer.in
	$(call green_msg, Generating $@)
	sed -e 's|@VERSION@|$(VERSION)|' -e 's|@databasedir@|$(DATABASE_DIR)|' < $< > $@
	@echo

clean:
	rm -f *.pdb *.map test-*.exe.core link.tmp link.args cl.args clang-cl.args \
	      libloc/version.h ../man/location.1 ../man/location.html
	rm -fr $(OBJ_DIR)
	@echo

vclean realclean: clean
	rm -fr py3_install lua_install
	rm -f $(TARGETS) .depend.Windows

man_doc:  ../man/location.1
html_doc: ../man/location.html

../man/location.xml: ../man/location.txt ../man/asciidoc.conf
	asciidoc -f ../man/asciidoc.conf -d manpage -b docbook -o $@ $<

XSLTPROC_FLAGS = --stringparam man.output.quietly 1          \
                 --stringparam funcsynopsis.style ansi       \
                 --stringparam man.th.extra1.suppress 1      \
                 --stringparam man.authors.section.enabled 1 \
                 --stringparam man.copyright.section.enabled 1

# XSLTPROC_FLAGS += http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl
XSLTPROC_FLAGS += --nonet docbook.xsl

../man/location.1: ../man/location.xml
	xsltproc.exe -o $@ $(XSLTPROC_FLAGS) $<

../man/location.html: ../man/location.txt ../man/asciidoc.conf
	asciidoc.exe -f ../man/asciidoc.conf -b html5 -a icons -a theme=flask -o $@ $<

#
# GNU-make macro:
#
# The following assumes you have a MSys/Cygwin 'echo.exe' program with colour support.
#
BRIGHT_RED   = \e[1;31m
BRIGHT_GREEN = \e[1;32m
BRIGHT_WHITE = \e[1;37m

colour_msg = @echo -e "$(1)\e[0m"
green_msg  = $(call colour_msg,$(BRIGHT_GREEN)$(strip $(1)))
white_msg  = $(call colour_msg,$(BRIGHT_WHITE)$(strip $(1)))
red_msg    = $(call colour_msg,$(BRIGHT_RED)$(strip $(1)))

define Warning
  $(1)
  $(1) DO NOT EDIT! This file was automatically generated
  $(1) from $(realpath $(THIS_FILE)) at $(TODAY).
  $(1) Edit that file instead.
  $(1)
endef

define generate
  $(call green_msg, Generating $(1))
  $(file > $(1),$(call Warning,$(strip $(2))))
endef

define generate_c
  $(call generate, $(1),//)
endef

define generate_py
  $(call generate, $(1),#)
  $(file >> $(1),if 1:)
  $(file >> $(1),$(2))
endef

#
# Create a response file $(1).
# One word from $(2) per line.
#
define create_resp_file
  $(file > $(1))
  $(foreach f, $(2), $(file >> $(1),$(strip $(f))) )
endef

#
# .obj -> .exe macro
#   arg1, $(1): The .exe file.
#   arg2, $(2): The .obj file(s), extra options and libs.
#
# And remove the .lib/.exp-files due to the pesky 'OPENSSL_Applink' export symbol.
#
define link_EXE
  $(call green_msg, Linking $(1))
  $(call create_resp_file, link.args, $(LDFLAGS) $(2))
  link -out:$(strip $(1)) @link.args > link.tmp
  @cat link.tmp >> $(1:.exe=.map)
  @rm -f $(1:.exe=.lib) $(1:.exe=.exp)
  @$(PYTHON) $(OBJ_DIR)/check-for-unused-libs.py link.tmp
endef

#
# .obj -> .dll macro
#   arg1, $(1): The .dll file.
#   arg2, $(2): The .obj file(s), extra options and libs.
#   arg3, $(3): The import library
#
define link_DLL
  $(call green_msg, Linking $(1))
  $(call create_resp_file, link.args, $(LDFLAGS) -dll -implib:$(strip $(3)) $(2))
  link -out:$(strip $(1)) @link.args > link.tmp
  @cat link.tmp >> $(1:.dll=.map)
  @rm -f $(3:.lib=.exp)
  @$(PYTHON) $(OBJ_DIR)/check-for-unused-libs.py link.tmp
endef

#
# .obj -> .pyd macro
#   arg1, $(1): The .pyd file.
#   arg2, $(2): The .obj file(s), extra options and libs.
#
define link_PYD
  $(call green_msg, Linking $@)
  $(call create_resp_file, link.args, $(LDFLAGS) -dll -libpath:$(PY_ROOT)/libs $(2))
  link -out:$(strip $(1)) @link.args > link.tmp
  @cat link.tmp >> $(1:.pyd=.map)
  @rm -f $(1:.pyd=.lib) $(1:.pyd=.exp)
  @$(PYTHON) $(OBJ_DIR)/check-for-unused-libs.py link.tmp
endef

define create_res_file
  rc $(RCFLAGS) -Fo $(1) $(2)
  @echo
endef

define C_compile
  $(CC) @$(CC).args -Fo./$(strip $(1) $(2))
  @echo
endef

define C_compile_MP
  $(call green_msg, Compiling $(words $(filter %.c, $(2))) files in one go...)
  $(call C_compile, $(1), -MP $(2))
endef

ifeq ($(USE_ASTYLE),1)
  pp_filter  = | astyle
  pp_comment = The preprocessed and AStyled output of '$(filter %.c, $(1))':
else
  pp_filter =
  pp_comment = The raw preprocessed output of '$(filter %.c, $(1))':
endif

define C_preprocess
  $(file  > $(1),/* $(call pp_comment, $(2)))
  $(file >> $(1), * $(CC) -E)
  @$(foreach f, $(CFLAGS) $(filter-out %.c, $(2)), $(file >> $(1), * $(f)))
  $(file >> $(1), *----------------------------------------------------------------------------------)
  $(file >> $(1), */)
  $(CC) -E @$(CC).args $(strip $(2)) | $(PYTHON) $(OBJ_DIR)/cpp-filter.py $(pp_filter) >> $(1)
endef

define RC_COMMON
  #include <winver.h>
  #include <libloc/version.h>

  #define RC_VERSION  LIBLOC_MAJOR_VER, LIBLOC_MINOR_VER, LIBLOC_MICRO_VER, 0

  #ifndef RC_FILENAME
  #error "Add a 'RC_FILENAME' first"
  #endif

  #ifndef RC_DESCRIPTION
  #error "Add a 'RC_DESCRIPTION' first"
  #endif

  #if $(USE_CRT_DEBUG)
    #define DBG_STRING  "$(CPU), debug"
  #else
    #define DBG_STRING  "$(CPU), release"
  #endif

  #if defined(__clang__)
    #define RC_COMPILER  "clang-cl"
  #elif defined(_MSC_VER)
    #define RC_COMPILER  "MSVC"
  #else
    #error "Unsupported compiler"
  #endif

  VS_VERSION_INFO VERSIONINFO
    FILEVERSION    RC_VERSION
    PRODUCTVERSION RC_VERSION
    FILEFLAGSMASK  0x3fL
    FILEOS         0x40004L
    FILETYPE       0x2L
    FILESUBTYPE    0x0L
    FILEFLAGS      0x0L

  BEGIN
    BLOCK "StringFileInfo"
    BEGIN
      BLOCK "040904b0"
      BEGIN
        VALUE "CompanyName",      "https://git.ipfire.org/pub/git/location/libloc.git"
        VALUE "FileDescription",  RC_DESCRIPTION
        VALUE "FileVersion",      PACKAGE_VERSION
        VALUE "InternalName",     "libloc"
        VALUE "LegalCopyright",   "CC BY-SA 4.0."
        VALUE "LegalTrademarks",  "http://www.gnu.org/licenses/"
        VALUE "OriginalFilename", RC_FILENAME
        VALUE "ProductName",      RC_FILENAME
        VALUE "ProductVersion",   PACKAGE_VERSION " (" RC_COMPILER ", " DBG_STRING ")"
        VALUE "PrivateBuild",     ""
        VALUE "SpecialBuild",     ""
        VALUE "Comments",         "Built at $(TODAY)"
      END
    END
  BLOCK "VarFileInfo"
  BEGIN
    VALUE "Translation", 0x409, 1200
  END
  END
endef

define CPP_FILTER_PY
  import sys, os

  empty_lines = 0
  while True:
    line = sys.stdin.readline()
    if not line:
       break
    line = line.rstrip()
    if line == "":
       empty_lines += 1
       continue

    #
    # MSVC or clang-cl 'line' directive
    #
    l = line.lstrip()
    if l.startswith("#line") or l.startswith("# "):
       line = line.replace (r"\\", "/")

    print (line)

    #
    # Print a newline after a functions or structs
    #
    if l == "}" or l == "};":
       print ("")

  print ("Removed %d empty lines." % empty_lines, file=sys.stderr)
endef

define CHECK_FOR_UNUSED_LIBS_PY
  import os, sys

  map_file    = sys.argv[1]
  ignore_libs = [ "oldnames.lib" ]

  class State():
    IDLE   = 0
    UNUSED = 1

  class Colour():
    RED = WHITE = RESET = ""

  try:
    import colorama
    colorama.init()
    Colour.RED   = colorama.Fore.RED   + colorama.Style.BRIGHT
    Colour.WHITE = colorama.Fore.WHITE + colorama.Style.BRIGHT
    Colour.RESET = colorama.Style.RESET_ALL
  except:
    pass

  def cprint (color, s):
    print ("%s%s%s" % (color, s, Colour.RESET))

  def report (unused):
    num = len(unused)
    if num > 0:
       cprint (Colour.RED, "%d unused %s in %s:" % (num, ["library", "libraries"][num > 1], map_file))
       for u in unused:
           print ("  " + u)
    cprint (Colour.WHITE, "Done.")

  def process_map (state):
    unused_libs = []
    f = open (map_file, "rt")
    lines = f.readlines()
    f.close()
    for l in lines:
      l = l.strip()
      if l == "Unused libraries:":
         state = State.UNUSED
         continue
      if state == State.UNUSED:
         if l == "":
            break
         if os.path.basename (l).lower() not in ignore_libs:
            unused_libs.append (l)
    return unused_libs

  report (process_map(State.IDLE))
endef


DEP_CFLAGS  = -MM $(filter -D% -I%, $(CFLAGS))
DEP_REPLACE = sed -e 's@\(.*\)\.o: @\n$$(OBJ_DIR)\/\1.obj: @' \
                  -e 's@libloc/version.h@@'

depend:
	$(call generate, .depend.Windows, #)
	gcc $(DEP_CFLAGS) $(TEST_SRC) $(LIBLOC_SRC) $(LUA_SRC) $(PY_SRC) | $(DEP_REPLACE) >> .depend.Windows
	@echo

$(OBJ_DIR)/libloc.obj: fake-OpenSSL/openssl/applink.c

-include .depend.Windows

