#
# Wsock-trace makefile for CygWin32 / CygWin64.
# This requires GNU make v4 or later.
#
# G. Vanem <gvanem@yahoo.no> 2011 - 2021.
#
USE_CRT_DEBUG ?= 0
USE_BFD       ?= 0

#
# If you want LuaJIT-script support, set 'USE_LUAJIT = 1':
#
USE_LUAJIT ?= 1
LUAJIT_ROOT = LuaJIT

BIN_TARGET = /usr/bin
LIB_TARGET = /usr/lib

CC      = gcc
CFLAGS  = -Wall -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0600 -D__USE_W32_SOCKETS \
          -fmax-errors=5 -Wno-pragmas -Wno-unused-function -Wno-unused-variable
LDFLAGS = -Wl,--print-map,--sort-common -t
RCFLAGS = -O COFF -DDEBUG=$(USE_CRT_DEBUG) -DBITNESS=$(BITS) -D__CYGWIN__
OBJ_DIR = Cygwin_obj

MAKEFLAGS += --warn-undefined-variables

#
# Check if we use a 32 or a 64-bit Cygwin gcc:
#  "i686-pc-cygwin"   - a 32-bit
#  "x86_64-pc-cygwin" - a 64-bit
#
CHECK_MACHINE = $(shell gcc -dumpmachine)

ifeq ($(USE_CRT_DEBUG),1)
  CCOPT = -O0 -D_DEBUG
  _D    = _d
else
  CCOPT = -O3 -fomit-frame-pointer
  _D    =
endif

CCDEBUG = -ggdb
CFLAGS += $(CCDEBUG) $(CCOPT)

ifeq ($(CHECK_MACHINE),i686-pc-cygwin)
  WSOCK_LIB = libwsock_trace_cyg$(_D)-x86.a
  WSOCK_DLL = wsock_trace_cyg$(_D)-x86.dll
  BITS      = 32
else
  WSOCK_LIB = libwsock_trace_cyg$(_D)-x64.a
  WSOCK_DLL = wsock_trace_cyg$(_D)-x64.dll
  BITS      = 64
endif

ifeq ($(USE_BFD),1)
  CFLAGS  += -DUSE_BFD -Wno-unused-but-set-variable
  EX_LIBS += -lbfd -liberty -lintl -lz
endif

ifeq ($(USE_LUAJIT),1)
  CFLAGS    += -DUSE_LUAJIT -I$(LUAJIT_ROOT)/src
  LUAJIT_LIB = $(LUAJIT_ROOT)/src/libluajit.a
else
  LUAJIT_LIB =
endif

LIBLOC_ROOT = ./Geo-IP/IPFire/src
LIBLOC_LIB  = libloc_cyg$(_D).a
CFLAGS     += -I$(LIBLOC_ROOT)
EX_LIBS    += -ldnsapi -lole32 -ladvapi32 -lwinmm

SOURCES = asn.c             \
          bfd_gcc.c         \
          common.c          \
          cpu.c             \
          csv.c             \
          dnsbl.c           \
          dump.c            \
          firewall.c        \
          geoip.c           \
          hosts.c           \
          iana.c            \
          idna.c            \
          inet_addr.c       \
          inet_util.c       \
          init.c            \
          ip2loc.c          \
          overlap.c         \
          services.c        \
          smartlist.c       \
          stkwalk.c         \
          wsock_trace.c     \
          wsock_trace_lua.c \
          xz_decompress.c

OBJECTS        = $(addprefix $(OBJ_DIR)/, $(SOURCES:.c=.o) wsock_trace.res)
NON_EXPORT_OBJ = $(OBJ_DIR)/non-export.o

WS_TOOL_OBJ = $(addprefix $(OBJ_DIR)/, \
                asn.o                  \
                backtrace.o            \
                bfd_gcc.o              \
                common.o               \
                cpu.o                  \
                csv.o                  \
                dnsbl.o                \
                dump.o                 \
                firewall.o             \
                geoip.o                \
                hosts.o                \
                iana.o                 \
                idna.o                 \
                inet_addr.o            \
                init.o                 \
                inet_util.o            \
                ip2loc.o               \
                overlap.o              \
                services.o             \
                smartlist.o            \
                stkwalk.o              \
                test.o                 \
                vm_dump.o              \
                ws_tool.o              \
                wsock_trace_lua.o      \
                xz_decompress.o)

WS_TOOL_OBJ += $(OBJ_DIR)/ws_tool.res

#
# .o-files for '$(LIBLOC_LIB).
#
# Must use 'win_mmap.c' even for Cygwin since using the normal 'mmap()'
# doesn't work in 'libloc'. Do not ask me why.
#
LIBLOC_OBJ = $(addprefix $(OBJ_DIR)/, \
               address.o              \
               as.o                   \
               as-list.o              \
               country.o              \
               country-list.o         \
               database.o             \
               libloc.o               \
               network.o              \
               network-list.o         \
               resolv.o               \
               stringpool.o           \
               writer.o               \
               win_mmap.o)

LIBLOC_CFLAGS = -I.                             \
                -I$(LIBLOC_ROOT)/fake-OpenSSL   \
                -I$(LIBLOC_ROOT)/libloc/windows \
                -DENABLE_DEBUG                  \
                -DUSE_WSOCK_TRACE               \
                --include $(LIBLOC_ROOT)/fake-OpenSSL/openssl/applink.c

all: message $(OBJ_DIR) $(WSOCK_LIB) ws_tool.exe
	$(call green_msg, Welcome to Wsock_trace library and ws_tool.exe program.)

comma := ,

message:
	$(call green_msg, Building CygWin $(BITS)-bit version. \
	                  USE_LUAJIT=$(USE_LUAJIT)$(comma) USE_CRT_DEBUG=$(USE_CRT_DEBUG)$(comma) USE_BFD=$(USE_BFD).)

$(OBJ_DIR):
	- mkdir $(OBJ_DIR)

$(WSOCK_LIB): $(WSOCK_DLL)

$(WSOCK_DLL): $(OBJECTS) $(NON_EXPORT_OBJ) $(LUAJIT_LIB) $(LIBLOC_LIB)
	$(call green_msg, Linking $@.)
	$(CC) $(LDFLAGS) -shared -Wl,--out-implib,$(WSOCK_LIB) -o $@ $(OBJECTS) $(LUAJIT_LIB) $(LIBLOC_LIB) $(EX_LIBS) > $(WSOCK_DLL:.dll=.map)
	ar rs $(WSOCK_LIB) $(NON_EXPORT_OBJ)
	@echo

install: $(WSOCK_LIB) $(WSOCK_DLL)
	cp --update $(WSOCK_LIB)  $(LIB_TARGET)
	cp --update $(WSOCK_DLL)  $(BIN_TARGET)

ws_tool.exe: $(WS_TOOL_OBJ) $(LIBLOC_LIB) $(LUAJIT_LIB)
	$(CC) -o $@ $(LDFLAGS) $^ $(EX_LIBS) -lws2_32 > ws_tool.map
	@echo

$(OBJ_DIR)/%.o: $(LIBLOC_ROOT)/%.c | $(CC).args
	$(CC) @$(CC).args $(LIBLOC_CFLAGS) -o $@ $<
	@echo

$(OBJ_DIR)/%.o: %.c | $(CC).args
	$(CC) @$(CC).args -o $@ $<
	@echo

$(OBJ_DIR)/%.res: %.rc
	windres $(RCFLAGS) -o $@ $<
	@echo

$(CC).args::
	$(call yellow_msg, All CFLAGS are in $@.)
	$(call create_resp_file, $@, -c $(CFLAGS))

run_test: ws_tool.exe
	ws_tool.exe -dd test

#
# Just a simple Cygwin version test program.
#
cyg-ver.exe: cyg-ver.c
	$(CC) -o $@ $(LDFLAGS) $(CFLAGS) $< > cyg-ver.map
	@echo

print_cyg-ver: cyg-ver.exe
	$(call green_msg, $(shell ./cyg-ver.exe))

$(LIBLOC_LIB): $(LIBLOC_OBJ)
	$(call green_msg, Creating $@)
	ar rs $@ $^
	@echo

ifeq ($(USE_LUAJIT),1)
  #
  # Change to '$(LUAJIT_ROOT)/src' to build LuaJIT.
  #
  LUAJIT_MAKE_FLAGS = TARGET_SYS=Windows DEFAULT_CC=gcc CCDEBUG=$(CCDEBUG) CCOPT='$(CCOPT)'

  #
  # Let '$(LUAJIT_ROOT)/src/Makefile' shut up about undefined variables.
  #
  LUAJIT_MAKE_FLAGS += CFLAGS= TARGET_FLAGS= TARGET_CFLAGS= CROSS=

  $(LUAJIT_LIB):
	$(call green_msg, Building LuaJIT ...)
	$(MAKE) -C $(LUAJIT_ROOT)/src $(LUAJIT_MAKE_FLAGS) all
	@echo
endif

clean_lua:
	 - rm -f $(LUAJIT_ROOT)/src/host/buildvm.exe $(LUAJIT_ROOT)/src/host/minilua.exe \
	         $(LUAJIT_ROOT)/src/libluajit.a      $(LUAJIT_ROOT)/src/*.o              \
	         $(LUAJIT_ROOT)/src/host/*.o

clean: clean_lua
	rm -fr $(OBJ_DIR)
	rm -f $(CC).args $(WSOCK_DLL:.dll=.map)

vclean realclean: clean
	rm -f libwsock_trace_cyg*.{a,dll,map} ws_tool.{exe,map} cyg-ver.{exe,map} \
	      .depend.CygWin $(LIBLOC_LIB)

machine_test:
	$(call green_msg, CHECK_MACHINE: $(CHECK_MACHINE))
ifeq ($(CHECK_MACHINE),i686-pc-cygwin)
	$(call yellow_msg, Using a 32-bit Cygwin.)
else ifeq ($(CHECK_MACHINE),x86_64-pc-cygwin)
	$(call yellow_msg, Using a 64-bit Cygwin.)
else
	$(call yellow_msg, Using an unknown Cygwin.)
endif

#
# Some fixed dependencies:
#
$(OBJ_DIR)/ws_tool.o: csv.c backtrace.c geoip.c iana.c firewall.c dnsbl.c idna.c

#
# The following needs a Cygwin/Msys 'echo' with colour support.
#
BRIGHT_GREEN  = \e[1;32m
BRIGHT_YELLOW = \e[1;33m

colour_msg = @echo -e "$(1)\e[0m"
green_msg  = $(call colour_msg,$(BRIGHT_GREEN)$(strip $(1)))
yellow_msg = $(call colour_msg,$(BRIGHT_YELLOW)$(strip $(1)))

#
# Create a response file $(1).
# One word from $(2) per line.
#
define create_resp_file
  $(file > $(1))
  $(foreach f, $(2), $(file >> $(1),$(strip $(f))) )
endef

DEP_REPLACE = sed -e 's/\(.*\)\.o: /\n$$(OBJ_DIR)\/\1.o: /'

depend:
	$(CC) -M $(CFLAGS) $(SOURCES) non-export.c test.c | $(DEP_REPLACE) > .depend.CygWin

-include .depend.CygWin
