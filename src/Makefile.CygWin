#
# Wsock-trace makefile for CygWin32 / CygWin64.
# This requires GNU make v4 or later.
#
# G. Vanem <gvanem@yahoo.no> 2011 - 2020.
#
USE_CRT_DEBUG ?= 0
USE_BFD       ?= 0

#
# If you want Lua-script support, set 'USE_LUA = 1':
#
USE_LUA    ?= 0
LUAJIT_ROOT = ../LuaJIT

BIN_TARGET = /usr/bin
LIB_TARGET = /usr/lib

CC      = gcc
CFLAGS  = -Wall -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0600 -D__USE_W32_SOCKETS -fmax-errors=5 -Wno-pragmas
LDFLAGS = -Wl,--print-map,--sort-common -t
RCFLAGS = -O COFF -DDEBUG=$(USE_CRT_DEBUG) -D__CYGWIN__
OBJ_DIR = Cygwin_obj

#
# Check if we use a 32 or a 64-bit Cygwin gcc:
#  "i686-pc-cygwin"   - a 32-bit
#  "x86_64-pc-cygwin" - a 64-bit
#
CHECK_MACHINE = $(shell gcc -dumpmachine)

ifeq ($(USE_CRT_DEBUG),1)
  CFLAGS += -O0 -ggdb
  _D = _d
else
  CFLAGS  += -O3 -fomit-frame-pointer
  LDFLAGS += -s
  _D =
endif

ifeq ($(CHECK_MACHINE),i686-pc-cygwin)
  WSOCK_LIB = libwsock_trace_cyg$(_D).a
  WSOCK_DLL = wsock_trace_cyg$(_D).dll
  CYG_VER   = 32-bit
else
  WSOCK_LIB = libwsock_trace_cyg_x64$(_D).a
  WSOCK_DLL = wsock_trace_cyg_x64$(_D).dll
  CYG_VER   = 64-bit
endif

ifeq ($(USE_BFD),1)
  CFLAGS  += -DUSE_BFD -Wno-unused-but-set-variable -Wno-unused-variable
  EX_LIBS += -lbfd -liberty -lintl -lz
endif

ifeq ($(USE_LUA),1)
  CFLAGS    += -DUSE_LUA -I$(LUAJIT_ROOT)/src
  LUAJIT_LIB = $(LUAJIT_ROOT)/src/libluajit.a
else
  LUAJIT_LIB =
endif

LIBLOC_ROOT = ./Geo-IP/IPFire/src
LIBLOC_LIB  = libloc_cyg$(_D).a
CFLAGS     += -I$(LIBLOC_ROOT)
EX_LIBS    += -ldnsapi -lole32 -ladvapi32

SOURCES = asn.c         \
          bfd_gcc.c     \
          common.c      \
          cpu.c         \
          csv.c         \
          dnsbl.c       \
          dump.c        \
          firewall.c    \
          geoip.c       \
          hosts.c       \
          iana.c        \
          idna.c        \
          in_addr.c     \
          inet_util.c   \
          init.c        \
          ip2loc.c      \
          overlap.c     \
          smartlist.c   \
          stkwalk.c     \
          wsock_trace.c \
          wsock_trace_lua.c

OBJECTS        = $(addprefix $(OBJ_DIR)/, $(SOURCES:.c=.o) wsock_trace.res)
NON_EXPORT_OBJ = $(OBJ_DIR)/non-export.o

GEOIP_OBJ = $(addprefix $(OBJ_DIR)/, \
              geoip_1.o              \
              asn.o                  \
              common.o               \
              csv.o                  \
              dnsbl.o                \
              iana.o                 \
              idna.o                 \
              inet_util.o            \
              init_1.o               \
              in_addr.o              \
              ip2loc.o               \
              smartlist.o)

WS_TOOL_OBJ = $(addprefix $(OBJ_DIR)/, \
                asn.o                  \
                common.o               \
                cpu.o                  \
                dump.o                 \
                getopt.o               \
                hosts.o                \
                in_addr.o              \
                init.o                 \
                inet_util.o            \
                ip2loc.o               \
                overlap.o              \
                smartlist.o            \
                stkwalk.o              \
                vm_dump.o              \
                wsock_trace.o          \
                wsock_trace_lua.o      \
                ws_tool.o)

#
# .o-files for '$(LIBLOC_LIB).
#
# Must use 'win_mmap.c' even for Cygwin since using the normal 'mmap()'
# doesn't work in 'libloc'. Do not ask me why.
#
LIBLOC_OBJ = $(addprefix $(OBJ_DIR)/, \
               as.o                   \
               as-list.o              \
               country.o              \
               country-list.o         \
               database.o             \
               libloc.o               \
               network.o              \
               network-list.o         \
               resolv.o               \
               stringpool.o           \
               writer.o               \
               win_mmap.o)

LIBLOC_CFLAGS = -I.                           \
                -I$(LIBLOC_ROOT)/fake-OpenSSL \
                -I$(LIBLOC_ROOT)/loc/windows  \
                --include $(LIBLOC_ROOT)/fake-OpenSSL/openssl/applink.c

all: message $(OBJ_DIR) $(WSOCK_LIB) geoip.exe test.exe idna.exe firewall_test.exe
	$(call green_msg, Welcome to Wsock_trace library and example.)

comma := ,

message:
	$(call green_msg, Building CygWin $(CYG_VER) version. \
	                  USE_LUA=$(USE_LUA)$(comma) USE_CRT_DEBUG=$(USE_CRT_DEBUG)$(comma) USE_BFD=$(USE_BFD).)

$(OBJ_DIR):
	- mkdir $(OBJ_DIR)

$(WSOCK_LIB): $(WSOCK_DLL)

$(WSOCK_DLL): $(OBJECTS) $(NON_EXPORT_OBJ) $(LUAJIT_LIB) $(LIBLOC_LIB)
	$(call green_msg, Linking $@.)
	$(CC) $(LDFLAGS) -shared -Wl,--out-implib,$(WSOCK_LIB) -o $@ $(OBJECTS) $(LUAJIT_LIB) $(LIBLOC_LIB) $(EX_LIBS) > $(WSOCK_DLL:.dll=.map)
	ar rs $(WSOCK_LIB) $(NON_EXPORT_OBJ)
	@echo

install: $(WSOCK_LIB) $(WSOCK_DLL)
	cp --update $(WSOCK_LIB)  $(LIB_TARGET)
	cp --update $(WSOCK_DLL)  $(BIN_TARGET)

test.exe: $(OBJ_DIR)/test.o $(WSOCK_LIB)
	$(CC) -o $@ $(LDFLAGS) $^ $(EX_LIBS) > test.map
	@echo

iana.exe: asn.c common.c csv.c dnsbl.c geoip.c iana.c idna.c in_addr.c inet_util.c init.c smartlist.c $(LIBLOC_LIB)
	$(CC) -o $@ $(CFLAGS) $(LDFLAGS) -DTEST_IANA $^ -lws2_32 -ldnsapi -lole32 -ladvapi32 > iana.map
	@echo

idna.exe: idna.c common.c smartlist.c $(WSOCK_LIB)
	$(CC) -o $@ $(CFLAGS) $(LDFLAGS) -DTEST_IDNA $^ -lole32 > idna.map
	@echo

firewall_test.exe: asn.c common.c csv.c dnsbl.c firewall.c geoip.c iana.c idna.c in_addr.c inet_util.c init.c ip2loc.c smartlist.c $(LIBLOC_LIB)
	$(CC) -o $@ $(CFLAGS) $(LDFLAGS) -DTEST_FIREWALL -DTEST_GEOIP $^ -lws2_32 -ldnsapi -lole32 -ladvapi32 -lwinmm > firewall_test.map
	@echo

geoip.exe: $(GEOIP_OBJ) $(LIBLOC_LIB)
	$(CC) -o $@ $(LDFLAGS) $^ -lws2_32 -ldnsapi -lole32 > geoip.map
	@echo

ws_tool.exe: $(WS_TOOL_OBJ) $(LIBLOC_LIB)
	$(CC) -o $@ $(LDFLAGS) $^ -ldnsapi -ladvapi32 -lole32 -lwinmm > ws_tool.map
	@echo

$(OBJ_DIR)/init_1.o: init.c
	$(CC) -c $(CFLAGS) -o $@ -DTEST_GEOIP $<
	@echo

$(OBJ_DIR)/geoip_1.o: geoip.c
	$(CC) -c $(CFLAGS) -o $@ -DTEST_GEOIP $<
	@echo

$(OBJ_DIR)/%.o: $(LIBLOC_ROOT)/%.c
	$(CC) -c $(CFLAGS) $(LIBLOC_CFLAGS) -o $@ $<
	@echo

$(OBJ_DIR)/%.o: %.c
	$(CC) $(CFLAGS) -o $@ -c $<
	@echo

run_test: test.exe
	test.exe

#
# Just a simple Cygwin version test program.
#
cyg-ver.exe: cyg-ver.c
	$(CC) -o $@ $(LDFLAGS) $(CFLAGS) $< > cyg-ver.map
	@echo

print_cyg-ver: cyg-ver.exe
	$(call green_msg, $(shell ./cyg-ver.exe))

$(LIBLOC_LIB): $(LIBLOC_OBJ)
	$(call green_msg, Creating $@)
	ar rs $@ $^
	@echo

ifeq ($(USE_LUA),1)
  #
  # Change to '$(LUAJIT_ROOT)/src' to build LuaJIT.
  #
$(LUAJIT_LIB):
	$(call green_msg, Building LuaJIT ...)
	$(MAKE) -C $(LUAJIT_ROOT)/src libluajit.a $(LUAJIT_EXTRAS)
	@echo

clean_lua:
	 - rm -f $(LUAJIT_ROOT)/src/host/buildvm.exe $(LUAJIT_ROOT)/src/host/minilua.exe
	 - rm -f $(LUAJIT_ROOT)/src/*.o $(LUAJIT_ROOT)/src/host/*.o $(LUAJIT_LIB)
else

clean_lua: ;
endif

clean: clean_lua
	- rm -f $(OBJ_DIR)/*.o $(OBJ_DIR)/*.res

vclean realclean: clean
	rm -f libwsock_trace*.a wsock_trace_cyg*.dll wsock_trace_cyg*.map   \
	      iana.exe iana.map idna.exe idna.map           \
	      geoip.exe geoip.map test.exe test.map cyg-ver.exe cyg-ver.map \
	      firewall_test.exe firewall_test.map .depend.CygWin $(LIBLOC_LIB)
	- rmdir $(OBJ_DIR)

machine_test:
	$(call green_msg, CHECK_MACHINE: $(CHECK_MACHINE))
ifeq ($(CHECK_MACHINE),i686-pc-cygwin)
	$(call yellow_msg, Using a 32-bit Cygwin.)
else ifeq ($(CHECK_MACHINE),x86_64-pc-cygwin)
	$(call yellow_msg, Using a 64-bit Cygwin.
else
	$(call yellow_msg, Using an unknown Cygwin.)
endif


#
# Some fixed dependencies:
#
$(OBJ_DIR)/ws_tool.o: csv.c backtrace.c geoip.c iana.c firewall.c dnsbl.c idna.c

#
# The following codes used in macro 'colour_msg' uses Cygwin's echo with colour support.
#
BRIGHT_GREEN  = \e[1;32m
BRIGHT_YELLOW = \e[1;33m

colour_msg = @echo -e "$(1)\e[0m"
green_msg  = $(call colour_msg,$(BRIGHT_GREEN)$(strip $(1)))
yellow_msg = $(call colour_msg,$(BRIGHT_YELLOW)$(strip $(1)))

$(OBJ_DIR)/wsock_trace.res: wsock_trace.rc
	windres $(RCFLAGS) -o $(OBJ_DIR)/wsock_trace.res wsock_trace.rc

DEP_REPLACE = sed -e 's/\(.*\)\.o: /\n$$(OBJ_DIR)\/\1.o: /'

depend:
	$(CC) -M $(CFLAGS) $(SOURCES) non-export.c test.c | $(DEP_REPLACE) > .depend.CygWin

-include .depend.CygWin
