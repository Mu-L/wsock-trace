#
# Wsock-trace makefile for MinGW, MinGW64-w64 or TDM-gcc.
# This requires GNU make v4 or later.
#
# G. Vanem <gvanem@yahoo.no> 2011 - 2020.
#
USE_CRT_DEBUG ?= 0
USE_BFD       ?= 0

#
# If you want Lua-script support, set 'USE_LUA = 1':
#
USE_LUA    ?= 0
LUAJIT_ROOT = ../LuaJIT

BIN_TARGET = $(realpath $(MINGW32))/bin
LIB_TARGET = $(realpath $(MINGW32))/lib

#
# If '$(CPU)=x64', build 64-bit version. Assuming your MinGW
# is dual-target capable and supports the '-m32' / '-m64' options.
# Otherwise 32-bit programs.
#
ifeq ($(CPU),)
  CPU = x86
endif

ifeq ($(CPU),X86)
  CPU = x86
endif

ifeq ($(CPU),X64)
  CPU = x64
endif

CC      = gcc
OBJ_DIR = MinGW_obj

ifeq ($(CPU),x64)
  RCFLAGS  = --target=pe-x86-64
  BITS     = 64
  X_SUFFIX = _x64
else
  RCFLAGS  = --target=pe-i386
  BITS     = 32
  X_SUFFIX =
endif

CFLAGS   = -Wall -m$(BITS) -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0600 -Wno-unused-variable -Wno-unused-function
LDFLAGS  = -m$(BITS) -Wl,--print-map,--sort-common -t
RCFLAGS += -O COFF -DDEBUG=$(USE_CRT_DEBUG) -D__MINGW32__ -DBITNESS=$(BITS)

ifeq ($(USE_LUA),1)
  CFLAGS += -DUSE_LUA -I$(LUAJIT_ROOT)/src
endif

ifeq ($(USE_CRT_DEBUG),1)
  CFLAGS += -O0 -ggdb -D_DEBUG
else
  CFLAGS  += -O3 -fomit-frame-pointer
  LDFLAGS += # -s
endif

ifeq ($(USE_BFD),1)
  CFLAGS += -DUSE_BFD
  EX_LIBS = -lbfd -liberty -lintl -lz

  ifeq ($(CPU),x86)
    CFLAGS += -DBFD_ARCH_SIZE=32
  else ifeq ($(CPU),x64)
    CFLAGS += -DBFD_ARCH_SIZE=64
  else
    $(error "Unknown CPU")
  endif
endif

EX_LIBS += -lole32 -ladvapi32

SOURCES = wsock_trace.c wsock_trace_lua.c hosts.c idna.c inet_util.c init.c \
          common.c cpu.c dnsbl.c dump.c geoip.c geoip-gen4.c geoip-gen6.c \
          overlap.c iana.c in_addr.c ip2loc.c smartlist.c stkwalk.c bfd_gcc.c \
          firewall.c

OBJECTS        = $(addprefix $(OBJ_DIR)/, $(SOURCES:.c=.o) wsock_trace.res)
NON_EXPORT_OBJ = $(OBJ_DIR)/non-export.o

GEOIP_SRC = geoip.c common.c dnsbl.c iana.c idna.c inet_util.c init.c in_addr.c ip2loc.c smartlist.c
GEOIP_OBJ = $(GEOIP_SRC:.c=.o)

all: message $(OBJ_DIR) libwsock_trace.a geoip.exe test.exe idna.exe firewall_test.exe
	$(call green_msg, Welcome to Wsock_trace library and examples.)

message:
	$(call green_msg, Building MinGW version. CPU=$(CPU).)

$(OBJ_DIR):
	- mkdir $(OBJ_DIR)

libwsock_trace.a: wsock_trace_mw$(X_SUFFIX).dll

ifeq ($(USE_LUA),1)
wsock_trace_mw$(X_SUFFIX).dll: $(OBJECTS) $(NON_EXPORT_OBJ) $(LUAJIT_ROOT)/src/libluajit.a
	$(call green_msg, Linking $@.)
	$(CC) $(LDFLAGS) -shared -Wl,--out-implib,libwsock_trace.a -o $@ $(OBJECTS) \
          $(LUAJIT_ROOT)/src/libluajit.a $(EX_LIBS) > wsock_trace_mw$(X_SUFFIX).map
	ar rs libwsock_trace.a $(NON_EXPORT_OBJ)
	@echo

else
wsock_trace_mw$(X_SUFFIX).dll: $(OBJECTS) $(NON_EXPORT_OBJ)
	$(call green_msg, Linking $@.)
	$(CC) $(LDFLAGS) -shared -Wl,--out-implib,libwsock_trace.a -o $@ $(OBJECTS) $(EX_LIBS) > wsock_trace_mw$(X_SUFFIX).map
	ar rs libwsock_trace.a $(NON_EXPORT_OBJ)
	@echo
endif

install: libwsock_trace.a wsock_trace_mw$(X_SUFFIX).dll
	cp --update libwsock_trace.a              $(LIB_TARGET)
	cp --update wsock_trace_mw$(X_SUFFIX).dll $(BIN_TARGET)

test.exe: $(OBJ_DIR)/test.o libwsock_trace.a
	$(CC) -o $@ $(LDFLAGS) $^ > test.map
	@echo

iana.exe: common.c dnsbl.c geoip.c geoip-null.c iana.c idna.c in_addr.c inet_util.c init.c smartlist.c
	$(CC) -o $@ $(CFLAGS) $(LDFLAGS) -DTEST_IANA $^ -lws2_32 -lole32 -ladvapi32 > iana.map
	@echo

idna.exe: idna.c common.c smartlist.c libwsock_trace.a
	$(CC) -o $@ $(CFLAGS) $(LDFLAGS) -DTEST_IDNA $^ -lole32 > idna.map
	@echo

firewall_test.exe: common.c dnsbl.c firewall.c geoip.c geoip-gen4.c geoip-gen6.c iana.c idna.c in_addr.c inet_util.c init.c ip2loc.c smartlist.c
	$(CC) -o $@ $(CFLAGS) $(LDFLAGS) -DTEST_FIREWALL -DTEST_GEOIP $^ -lws2_32 -lole32 -ladvapi32 -lwinmm > firewall_test.map
	@echo

geoip-null.exe: $(GEOIP_SRC) geoip-null.c
	$(CC) -o $@ $(CFLAGS) $(LDFLAGS) -DTEST_GEOIP $^ -lws2_32 -lole32 > geoip-null.map
	@echo

geoip.exe: $(GEOIP_SRC) geoip-gen4.c geoip-gen6.c
	$(CC) -c $(CFLAGS) -DTEST_GEOIP $^
	$(CC) -o $@ $(LDFLAGS) $(GEOIP_OBJ) geoip-gen4.o geoip-gen6.o -lws2_32 -lole32 > geoip.map
	rm -f $(GEOIP_OBJ) geoip-null.o geoip-gen4.o geoip-gen6.o
	@echo

geoip-gen4.c: geoip-null.exe
	$(call green_msg, Generating $@.)
	geoip-null.exe -4g $@
	@echo

geoip-gen6.c: geoip-null.exe
	$(call green_msg, Generating $@.)
	geoip-null.exe -6g $@
	@echo

run_test: test.exe
	test.exe -dd

#
# Change to '$(LUAJIT_ROOT)/src' to build LuaJIT.
#
$(LUAJIT_ROOT)/src/libluajit.a:
	$(call green_msg, Building LuaJIT ...)
	$(MAKE) -C $(LUAJIT_ROOT)/src all TARGET_SYS=Windows DEFAULT_CC='gcc -m$(BITS)'

clean:
	- rm -f $(OBJ_DIR)/*.o $(OBJ_DIR)/*.res
ifeq ($(USE_LUA),1)
	- rm -f $(LUAJIT_ROOT)/src/host/buildvm.exe $(LUAJIT_ROOT)/src/host/minilua.exe
	- rm -f $(LUAJIT_ROOT)/src/*.o $(LUAJIT_ROOT)/src/host/*.o
	- rm -f $(LUAJIT_ROOT)/src/libluajit.a
endif

vclean realclean: clean
	rm -f libwsock_trace.a wsock_trace_mw$(X_SUFFIX).dll wsock_trace_mw$(X_SUFFIX).map \
	      idna.exe idna.map geoip.exe geoip.map geoip-null.exe geoip-null.map          \
	      test.exe test.map firewall_test.exe firewall_test.map                        \
	      geoip-gen4.c geoip-gen6.c wsock_trace_mw$(X_SUFFIX).def .depend.MinGW
	- rmdir $(OBJ_DIR)

$(OBJ_DIR)/%.o: %.c
	$(CC) $(CFLAGS) -o $@ -c $<
	@echo

#
# The following codes used in macro 'colour_msg' uses Cygwin's echo with colour support.
#
BRIGHT_GREEN  = \e[1;32m
BRIGHT_YELLOW = \e[1;33m

colour_msg = @echo -e "$(1)\e[0m"
green_msg  = $(call colour_msg,$(BRIGHT_GREEN)$(strip $(1)))
yellow_msg = $(call colour_msg,$(BRIGHT_YELLOW)$(strip $(1)))

$(OBJ_DIR)/wsock_trace.res: wsock_trace.rc
	windres $(RCFLAGS) -o $(OBJ_DIR)/wsock_trace.res wsock_trace.rc

REPLACE = sed -e 's/\(.*\)\.o: /\n$$(OBJ_DIR)\/\1.o: /'

depend:
	$(CC) -MM $(CFLAGS) $(SOURCES) non-export.c test.c | $(REPLACE) > .depend.MinGW

-include .depend.MinGW
