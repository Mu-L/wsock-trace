#
# Wsock-trace makefile for MinGW, MinGW64-w64 or TDM-gcc.
# This requires GNU make v4 or later.
#
# G. Vanem <gvanem@yahoo.no> 2011 - 2021.
#
USE_CRT_DEBUG ?= 0
USE_BFD       ?= 0

#
# If you want LuaJIT-script support, set 'USE_LUAJIT = 1':
#
USE_LUAJIT ?= 0
LUAJIT_ROOT = ../LuaJIT

BIN_TARGET = $(realpath $(MINGW32))/bin
LIB_TARGET = $(realpath $(MINGW32))/lib

#
# If '$(CPU)=x64', build 64-bit version. Assuming your MinGW
# is dual-target capable and supports the '-m32' / '-m64' options.
# Otherwise 32-bit programs.
#
ifeq ($(CPU),)
  CPU = x86
endif

ifeq ($(CPU),X86)
  CPU = x86
endif

ifeq ($(CPU),X64)
  CPU = x64
endif

CC      = gcc
OBJ_DIR = MinGW_obj

ifeq ($(CPU),x64)
  RCFLAGS  = --target=pe-x86-64
  BITS     = 64
  X_SUFFIX = _x64
else
  RCFLAGS  = --target=pe-i386
  BITS     = 32
  X_SUFFIX =
endif

CFLAGS   = -Wall -m$(BITS) -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0600 -Wno-unused-variable -Wno-unused-function
LDFLAGS  = -m$(BITS) -Wl,--print-map,--sort-common -t
RCFLAGS += -O COFF -DDEBUG=$(USE_CRT_DEBUG) -D__MINGW32__ -DBITNESS=$(BITS)

ifeq ($(USE_LUAJIT),1)
  CFLAGS    += -DUSE_LUAJIT -I$(LUAJIT_ROOT)/src
  LUAJIT_LIB = $(LUAJIT_ROOT)/src/libluajit.a
else
  LUAJIT_LIB =
endif

ifeq ($(USE_CRT_DEBUG),1)
  CCOPT = -O0 -D_DEBUG
  _D = _d
else
  CCOPT = -O3 -fomit-frame-pointer
  _D =
endif

CCDEBUG = -ggdb
CFLAGS += $(CCDEBUG) $(CCOPT)

#
# Disable annoying warnings like:
#   common.c:1575:19: warning: too many arguments for format [-Wformat-extra-args]
#      1575 |     sprintf (tmp, "%15" U64_FMT, val);
#           |                   ^~~~~
#
CFLAGS += -Wno-format

#
# And this warning:
#  dump.c:1605:26: warning: trigraph ??> ignored, use -trigraphs to enable [-Wtrigraphs]
#   1605 |         _strlcpy (buf, "<??>", buf_sz);
#
CFLAGS += -Wno-trigraphs

gcc @gcc.args -o MinGW_obj/firewall.o firewall.c
CFLAGS += -Wno-trigraphs

ifeq ($(USE_BFD),1)
  CFLAGS += -DUSE_BFD -DBFD_ARCH_SIZE=$(BITS)
  EX_LIBS = -lbfd -liberty -lintl -lz
endif

LIBLOC_ROOT = ./Geo-IP/IPFire/src
LIBLOC_LIB  = libloc_mw.a
CFLAGS     += -I$(LIBLOC_ROOT)
EX_LIBS    += -lole32 -ladvapi32 -ldnsapi -lwinmm

WSOCK_DLL = wsock_trace_mw$(X_SUFFIX)$(_D).dll
WSOCK_LIB = libwsock_trace_mw$(X_SUFFIX)$(_D).a

SOURCES = asn.c             \
          bfd_gcc.c         \
          common.c          \
          cpu.c             \
          csv.c             \
          dnsbl.c           \
          dump.c            \
          firewall.c        \
          geoip.c           \
          hosts.c           \
          iana.c            \
          idna.c            \
          in_addr.c         \
          inet_util.c       \
          init.c            \
          ip2loc.c          \
          overlap.c         \
          services.c        \
          smartlist.c       \
          stkwalk.c         \
          wsock_trace.c     \
          wsock_trace_lua.c \
          xz_decompress.c

OBJECTS        = $(addprefix $(OBJ_DIR)/, $(SOURCES:.c=.o) wsock_trace.res)
NON_EXPORT_OBJ = $(OBJ_DIR)/non-export.o

WS_TOOL_OBJ = $(addprefix $(OBJ_DIR)/, \
                asn.o                  \
                backtrace.o            \
                bfd_gcc.o              \
                common.o               \
                cpu.o                  \
                csv.o                  \
                dnsbl.o                \
                dump.o                 \
                firewall.o             \
                geoip.o                \
                hosts.o                \
                iana.o                 \
                idna.o                 \
                in_addr.o              \
                init.o                 \
                inet_util.o            \
                ip2loc.o               \
                overlap.o              \
                services.o             \
                smartlist.o            \
                stkwalk.o              \
                test.o                 \
                vm_dump.o              \
                ws_tool.o              \
                wsock_trace_lua.o      \
                xz_decompress.o)

WS_TOOL_OBJ += $(OBJ_DIR)/ws_tool.res

#
# .c and .o-files for '$(LIBLOC_LIB).
#
LIBLOC_SRC = $(addprefix $(LIBLOC_ROOT)/, \
               address.c                  \
               as.c                       \
               as-list.c                  \
               country.c                  \
               country-list.c             \
               database.c                 \
               libloc.c                   \
               network.c                  \
               network-list.c             \
               resolv.c                   \
               stringpool.c               \
               writer.c                   \
               win_str.c                  \
               win_mmap.c)

LIBLOC_OBJ = $(addprefix $(OBJ_DIR)/, \
               $(notdir $(LIBLOC_SRC:.c=.o)) )

LIBLOC_CFLAGS = -I.                             \
                -I$(LIBLOC_ROOT)/fake-OpenSSL   \
                -I$(LIBLOC_ROOT)/libloc/windows \
                -DENABLE_DEBUG                  \
                -DUSE_WSOCK_TRACE               \
                --include $(LIBLOC_ROOT)/fake-OpenSSL/openssl/applink.c

all: message $(OBJ_DIR) $(WSOCK_LIB) ws_tool.exe
	$(call green_msg, Welcome to Wsock_trace library and ws_tool.exe program.)

message:
	$(call green_msg, Building MinGW version. CPU=$(CPU).)

$(OBJ_DIR):
	- mkdir $(OBJ_DIR)

$(WSOCK_LIB): $(WSOCK_DLL)

$(WSOCK_DLL): $(OBJECTS) $(NON_EXPORT_OBJ) $(LUAJIT_LIB) $(LIBLOC_LIB)
	$(call green_msg, Linking $@.)
	$(CC) $(LDFLAGS) -shared -Wl,--out-implib,$(WSOCK_LIB) -o $@ $(OBJECTS) $(LUAJIT_LIB) $(LIBLOC_LIB) $(EX_LIBS) > $(WSOCK_DLL:.dll=.map)
	ar rs $(WSOCK_LIB) $(NON_EXPORT_OBJ)
	@echo

install: $(WSOCK_LIB) $(WSOCK_DLL)
	cp --update $(WSOCK_LIB)  $(LIB_TARGET)
	cp --update $(WSOCK_DLL)  $(BIN_TARGET)

ws_tool.exe: $(WS_TOOL_OBJ) $(WSOCK_LIB) $(LIBLOC_LIB) $(LUAJIT_LIB)
	$(CC) -o $@ $(LDFLAGS) $^ $(EX_LIBS) > ws_tool.map
	@echo

run_test: ws_tool.exe
	ws_tool.exe -dd test

$(LIBLOC_LIB): $(LIBLOC_OBJ)
	$(call green_msg, Creating $@)
	ar rs $@ $^
	@echo

ifeq ($(USE_LUAJIT),1)
  #
  # Change to '$(LUAJIT_ROOT)/src' to build LuaJIT.
  #
  $(LUAJIT_LIB):
	$(call green_msg, Building LuaJIT ...)
	$(MAKE) -C $(LUAJIT_ROOT)/src TARGET_SYS=Windows DEFAULT_CC='gcc -m$(BITS)' CCDEBUG=$(CCDEBUG) CCOPT='$(CCOPT)' all

  clean_lua:
	- rm -f $(LUAJIT_ROOT)/src/host/buildvm.exe $(LUAJIT_ROOT)/src/host/minilua.exe
	- rm -f $(LUAJIT_ROOT)/src/*.o $(LUAJIT_ROOT)/src/host/*.o $(LUAJIT_LIB)

else
  clean_lua: ;
endif

clean: clean_lua
	- rm -f $(OBJ_DIR)/*.o $(OBJ_DIR)/*.res $(CC).args

vclean realclean: clean
	rm -f $(WSOCK_LIB) $(WSOCK_DLL) $(WSOCK_DLL:.dll=.map) $(LIBLOC_LIB) ws_tool.exe ws_tool.map .depend.MinGW
	- rmdir $(OBJ_DIR)

$(OBJ_DIR)/%.o: $(LIBLOC_ROOT)/%.c | $(CC).args
	$(CC) @$(CC).args $(LIBLOC_CFLAGS) -o $@ $<
	@echo

$(OBJ_DIR)/%.o: %.c | $(CC).args
	$(CC) @$(CC).args -o $@ $<
	@echo

$(OBJ_DIR)/%.res: %.rc
	windres $(RCFLAGS) -o $@ $<
	@echo

$(CC).args::
	$(call yellow_msg, All CFLAGS are in $@.)
	$(call create_resp_file, $@, -c $(CFLAGS))

#
# The following needs a Cygwin/Msys 'echo' with colour support.
#
BRIGHT_GREEN  = \e[1;32m
BRIGHT_YELLOW = \e[1;33m

colour_msg = @echo -e "$(1)\e[0m"
green_msg  = $(call colour_msg,$(BRIGHT_GREEN)$(strip $(1)))
yellow_msg = $(call colour_msg,$(BRIGHT_YELLOW)$(strip $(1)))

#
# Create a response file $(1).
# One word from $(2) per line.
#
define create_resp_file
  $(file > $(1))
  $(foreach f, $(2), $(file >> $(1),$(strip $(f))) )
endef

DEP_REPLACE = 's@\(.*\)\.o: @\n$$(OBJ_DIR)\/\1.o: @'

depend:
	$(CC) -MM $(CFLAGS) $(SOURCES) non-export.c test.c | sed -e $(DEP_REPLACE) > .depend.MinGW
	$(CC) -MM $(CFLAGS) $(LIBLOC_CFLAGS) $(LIBLOC_SRC) | sed -e $(DEP_REPLACE) -e 's@$(LIBLOC_ROOT)@$$(LIBLOC_ROOT)@' >> .depend.MinGW

-include .depend.MinGW
