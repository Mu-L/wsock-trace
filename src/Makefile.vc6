#
# Wsock-trace makefile for MSVC6+
# G. Vanem <gvanem@yahoo.no> 2018.
#
# Usage:
#   Open a "MSVC Developer Command Prompt" and set the compiler environment:
#
#     "%VSINSTALLDIR%VC\Auxiliary\Build\vcvarsall.bat" x86
#   or:
#     "%VSINSTALLDIR%VC\Auxiliary\Build\vcvarsall.bat" x64
#
# Then cd to this directory and run this makefile with:
#   nmake -f Makefile.vc6 clean all
#
!if "$(USE_CRT_DEBUG)" == ""
USE_CRT_DEBUG = 0
!endif

!if "$(USE_DEF_FILE)" == ""
USE_DEF_FILE = 1
!endif

#
# Support for Lua-scripting:
# But we cannot mix objects compiled with both '-MDd' and '-MD'.
#
!if "$(USE_LUA)" == "1"
LUAJIT_ROOT = ..\LuaJIT

!if "$(USE_CRT_DEBUG)" == "1"
!error "Cannot have 'USE_LUA=1' with 'USE_CRT_DEBUG=1'."
!endif
!endif

#
# Support for IPFire's 'libloc' library:
#
LIBLOC_ROOT = .\Geo-IP\IPFire\libloc

# Execute "%VSINSTALLDIR%VC\vcvarsall.bat" x64 (with quotes) inside a MSVC
# Developer Command Prompt or set '%CPU%=x64' to build a 64-bit version.
# 64-bit builds have a '_x64' suffix on DLL and lib.
#
!if "$(PLATFORM)" == "x64" || "$(CPU)" == "x64"
X_SUFFIX   = _x64
MACHINE    = x64
BITNESS    = 64
LIB_TARGET = $(VSINSTALLDIR)\lib\x64
BIN_TARGET = $(VSINSTALLDIR)\bin\x64

!else if "$(PLATFORM)" == "x86_arm" || "$(CPU)" == "x86_arm"
X_SUFFIX   =
MACHINE    = x86_arm
BITNESS    = 32
CFLAGS     = -D_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE=1
!else
MACHINE    = x86
BITNESS    = 32
LIB_TARGET = $(VSINSTALLDIR)\lib
BIN_TARGET = $(VSINSTALLDIR)\bin
!endif

#
# Configurations:
#  -MD   - vcruntime140.dll,  threads, release (normal)
#  -MDd  - vcruntime140d.dll, threads, debug
#  -MT   - libc, threads, release
#  -MTd  - libc, threads, debug
#
CC      = cl.exe
CFLAGS  = -nologo $(CFLAGS) -I. -W3 -Zi -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0600 # -GS -RTC1 -RTCu -D_DEBUG
LDFLAGS = -nologo -map -debug -incremental:no -subsystem:console
LDFLAGS = $(LDFLAGS) -machine:$(MACHINE) -nodefaultlib:uuid.lib

OBJ_DIR = MSVC_obj$(X_SUFFIX)

!if "$(USE_CRT_DEBUG)" == "1"
CFLAGS = $(CFLAGS) -MDd -Os -D_DEBUG
_D = _d
!else
CFLAGS = $(CFLAGS) -MD -Ot -Gs # -DNDEBUG
_D =
!endif

!if "$(USE_DEF_FILE)" == "1"
CFLAGS      = $(CFLAGS) -DUSE_DEF_FILE
WSOCK_DEF   = wsock_trace$(X_SUFFIX)$(_D).def
LDFLAGS_DEF = -def:$(WSOCK_DEF)
!endif

!if "$(USE_LUA)" == "1"
CFLAGS    = $(CFLAGS) -I$(LUAJIT_ROOT)/src -DUSE_LUA
EX_LIBS   = $(LUAJIT_ROOT)/src/lua51_static.lib
WSOCK_DEP = $(LUAJIT_ROOT)/src/lua51_static.lib
!endif

CFLAGS    = $(CFLAGS) -I$(LIBLOC_ROOT)/src
EX_LIBS   = $(EX_LIBS)   libloc$(X_SUFFIX)$(_D).lib dnsapi.lib ole32.lib
WSOCK_DEP = $(WSOCK_DEP) libloc$(X_SUFFIX)$(_D).lib

#
# The 'wsock_trace{_x64}.lib' is an import-lib for 'wsock_trace{_x64}.dll'.
# Since the SDK header <ws2ipdef.h> declares some data with no export
# declaration ('in6addr_any' etc.), the non-export.obj is simply added to this
# imp-lib.
#
WSOCK_TRACE_LIB = wsock_trace$(X_SUFFIX)$(_D).lib
WSOCK_TRACE_DLL = wsock_trace$(X_SUFFIX)$(_D).dll

CFLAGS = $(CFLAGS) -D_CRT_SECURE_NO_WARNINGS

WSOCK_TRACE_OBJ = $(OBJ_DIR)\common.obj          \
                  $(OBJ_DIR)\cpu.obj             \
                  $(OBJ_DIR)\csv.obj             \
                  $(OBJ_DIR)\dnsbl.obj           \
                  $(OBJ_DIR)\dump.obj            \
                  $(OBJ_DIR)\hosts.obj           \
                  $(OBJ_DIR)\firewall.obj        \
                  $(OBJ_DIR)\geoip.obj           \
                  $(OBJ_DIR)\asn.obj             \
                  $(OBJ_DIR)\iana.obj            \
                  $(OBJ_DIR)\idna.obj            \
                  $(OBJ_DIR)\ip2loc.obj          \
                  $(OBJ_DIR)\inet_util.obj       \
                  $(OBJ_DIR)\init.obj            \
                  $(OBJ_DIR)\in_addr.obj         \
                  $(OBJ_DIR)\overlap.obj         \
                  $(OBJ_DIR)\smartlist.obj       \
                  $(OBJ_DIR)\stkwalk.obj         \
                  $(OBJ_DIR)\vm_dump.obj         \
                  $(OBJ_DIR)\wsock_trace_lua.obj \
                  $(OBJ_DIR)\wsock_trace.obj     \
                  $(OBJ_DIR)\wsock_trace.res

#
# This .obj-file does not export any functions or data.
# It's simply added to '$(WSOCK_TRACE_LIB)'; the import-library for '$(WSOCK_TRACE_DLL)'.
#
NON_EXPORT_OBJ = $(OBJ_DIR)\non-export.obj

#
# These .obj-files are for 'firewall_test.exe', 'idna.exe'.
#
FIREWALL_TEST_OBJ = $(OBJ_DIR)\common.obj     \
                    $(OBJ_DIR)\csv.obj        \
                    $(OBJ_DIR)\dnsbl.obj      \
                    $(OBJ_DIR)\firewall_1.obj \
                    $(OBJ_DIR)\geoip.obj      \
                    $(OBJ_DIR)\getopt.obj     \
                    $(OBJ_DIR)\asn.obj        \
                    $(OBJ_DIR)\iana.obj       \
                    $(OBJ_DIR)\idna.obj       \
                    $(OBJ_DIR)\in_addr.obj    \
                    $(OBJ_DIR)\inet_util.obj  \
                    $(OBJ_DIR)\init_2.obj     \
                    $(OBJ_DIR)\ip2loc.obj     \
                    $(OBJ_DIR)\overlap.obj    \
                    $(OBJ_DIR)\smartlist.obj  \
                    $(OBJ_DIR)\stkwalk.obj

IDNA_OBJ = $(OBJ_DIR)\idna_1.obj \
           $(OBJ_DIR)\getopt.obj \
           $(OBJ_DIR)\common.obj \
           $(OBJ_DIR)\smartlist.obj

#
# .obj-files for 'geoip.exe'.
#
GEOIP_OBJ = $(OBJ_DIR)\geoip_1.obj   \
            $(OBJ_DIR)\common.obj    \
            $(OBJ_DIR)\csv.obj       \
            $(OBJ_DIR)\dnsbl.obj     \
            $(OBJ_DIR)\asn.obj       \
            $(OBJ_DIR)\iana.obj      \
            $(OBJ_DIR)\idna.obj      \
            $(OBJ_DIR)\inet_util.obj \
            $(OBJ_DIR)\init_1.obj    \
            $(OBJ_DIR)\in_addr.obj   \
            $(OBJ_DIR)\ip2loc.obj    \
            $(OBJ_DIR)\getopt.obj    \
            $(OBJ_DIR)\smartlist.obj

#
# .obj-files for 'iana.exe'.
#
IANA_OBJ = $(OBJ_DIR)\iana_1.obj    \
           $(OBJ_DIR)\asn.obj       \
           $(OBJ_DIR)\common.obj    \
           $(OBJ_DIR)\csv.obj       \
           $(OBJ_DIR)\dnsbl.obj     \
           $(OBJ_DIR)\geoip.obj     \
           $(OBJ_DIR)\idna.obj      \
           $(OBJ_DIR)\inet_util.obj \
           $(OBJ_DIR)\init_1.obj    \
           $(OBJ_DIR)\in_addr.obj   \
           $(OBJ_DIR)\getopt.obj    \
           $(OBJ_DIR)\smartlist.obj

#
# .obj-files for 'libloc$(X_SUFFIX)$(_D).lib'.
#
LIBLOC_OBJ = $(OBJ_DIR)\as.obj         \
             $(OBJ_DIR)\country.obj    \
             $(OBJ_DIR)\database.obj   \
             $(OBJ_DIR)\libloc.obj     \
             $(OBJ_DIR)\network.obj    \
             $(OBJ_DIR)\resolv.obj     \
             $(OBJ_DIR)\stringpool.obj \
             $(OBJ_DIR)\writer.obj     \
             $(OBJ_DIR)\win_str.obj    \
             $(OBJ_DIR)\win_mmap.obj

all: $(OBJ_DIR) compile_luajit_$(USE_LUA) $(WSOCK_TRACE_DLL) $(WSOCK_TRACE_LIB) \
     csv.exe geoip.exe test.exe iana.exe idna.exe firewall_test.exe
	@echo Welcome to Wsock_trace $(MACHINE) library and test-programs.

$(OBJ_DIR):
	mkdir $(OBJ_DIR)

$(WSOCK_TRACE_DLL) $(WSOCK_TRACE_LIB): $(WSOCK_DEF) $(WSOCK_TRACE_OBJ) $(NON_EXPORT_OBJ) $(WSOCK_DEP)
	link.exe -dll $(LDFLAGS) -implib:$(WSOCK_TRACE_LIB) -out:$(WSOCK_TRACE_DLL) $(LDFLAGS_DEF) $(WSOCK_TRACE_OBJ) $(EX_LIBS) advapi32.lib
	lib -nologo $(WSOCK_TRACE_LIB) $(NON_EXPORT_OBJ)
	@del $(WSOCK_TRACE_LIB:.lib=.exp)

install: all
	copy $(WSOCK_TRACE_LIB)         "$(LIB_TARGET)"
	copy $(WSOCK_TRACE_DLL)         "$(BIN_TARGET)"
	copy wsock_trace$(X_SUFFIX).pdb "$(BIN_TARGET)"

uninstall:
	- del "$(LIB_TARGET)\$(WSOCK_TRACE_LIB)"
	- del "$(BIN_TARGET)\$(WSOCK_TRACE_DLL)"
	- del "$(BIN_TARGET)\wsock_trace$(X_SUFFIX).pdb"

test.exe: $(OBJ_DIR)\test.obj $(OBJ_DIR)\getopt.obj $(WSOCK_TRACE_LIB)
	link.exe $(LDFLAGS) -verbose -out:$@ $** > link.tmp
	@type link.tmp >> test.map
	@echo

csv.exe: $(OBJ_DIR)\csv_1.obj $(OBJ_DIR)\getopt.obj
	link.exe $(LDFLAGS) -verbose -out:$@ $** > link.tmp
	@type link.tmp >> csv.map
	@echo

idna.exe: $(IDNA_OBJ) $(WSOCK_TRACE_LIB)
	link.exe $(LDFLAGS) -verbose -out:$@ $** ole32.lib > link.tmp
	@type link.tmp >> idna.map
	@echo

#
# These does NOT need to use '$(WSOCK_TRACE_LIB)', but 'ws2_32.lib'.
#
firewall_test.exe: $(FIREWALL_TEST_OBJ)
	link.exe $(LDFLAGS) -verbose -out:$@ $** $(EX_LIBS) advapi32.lib ws2_32.lib winmm.lib > link.tmp
	@type link.tmp >> firewall_test.map
	@echo

geoip.exe: $(GEOIP_OBJ)
	link.exe $(LDFLAGS) -out:$@  $** ws2_32.lib $(EX_LIBS)
	@echo

iana.exe: $(IANA_OBJ)
	link.exe $(LDFLAGS) -verbose -out:$@ $** ws2_32.lib $(EX_LIBS) > link.tmp
	@type link.tmp >> iana.map
	@echo

run_test: test.exe
	test.exe -dd

compile_luajit_ compile_luajit_0:
	@echo

compile_luajit_1:
	pushd $(LUAJIT_ROOT)\src      &    \
	if not exist lua51_static.lib (    \
	   msvcbuild.bat debug static &    \
	   copy lua51.lib lua51_static.lib )

libloc$(X_SUFFIX)$(_D).lib: $(LIBLOC_OBJ)
	lib -nologo -out:$@ $**
	@echo

clean:
	- del link.tmp vc1*.pdb $(OBJ_DIR)\*.obj $(OBJ_DIR)\wsock_trace.res test.lib
	- del libloc*.lib

vclean realclean: clean
	- del wsock_trace$(X_SUFFIX)$(_D).lib \
	      wsock_trace$(X_SUFFIX)$(_D).dll \
	      wsock_trace$(X_SUFFIX)$(_D).map \
	      wsock_trace$(X_SUFFIX)$(_D).pdb
	- del csv.exe           csv.map           csv.pdb
	- del geoip.exe         geoip.map         geoip.pdb
	- del iana.exe          iana.map          iana.pdb
	- del idna.exe          idna.map          idna.pdb
	- del test.exe          test.map          test.pdb
	- del firewall_test.exe firewall_test.map firewall_test.pdb
	- rd $(OBJ_DIR)
!if "$(USE_LUA)" == "1"
	- del $(LUAJIT_ROOT)\src\lua51*.lib
!endif

help:
	@type <<
Run one of the following targets:
  nmake -f Makefile.vc6 <VAR=x> [all | clean | vclean | install | uninstall]

where VAR can have of the following 'x' values:
  USE_CRT_DEBUG    (default: $(USE_CRT_DEBUG))
  USE_DEF_FILE     (default: $(USE_DEF_FILE))
  USE_LUA          (default: $(USE_LUA))
<< NOKEEP

$(OBJ_DIR)\wsock_trace.res: wsock_trace.rc
	rc -nologo -DDEBUG=$(USE_CRT_DEBUG) -DBITNESS=$(BITNESS) -D_MSC_VER -Fo $(OBJ_DIR)\wsock_trace.res $**

$(OBJ_DIR)\csv_1.obj: csv.c
	$(CC) -c $(CFLAGS) -DTEST_CSV -Fo$*.obj $**
	@echo

$(OBJ_DIR)\firewall_1.obj: firewall.c
	$(CC) -c $(CFLAGS) -DTEST_FIREWALL -Fo$*.obj $**
	@echo

$(OBJ_DIR)\iana_1.obj: iana.c
	$(CC) -c $(CFLAGS) -DTEST_IANA -Fo$*.obj $**
	@echo

$(OBJ_DIR)\idna_1.obj: idna.c
	$(CC) -c $(CFLAGS) -DTEST_IDNA -Fo$*.obj $**
	@echo

$(OBJ_DIR)\init_1.obj: init.c
	$(CC) -c $(CFLAGS) -DTEST_GEOIP -Fo$*.obj $**
	@echo

$(OBJ_DIR)\init_2.obj: init.c
	$(CC) -c $(CFLAGS) -DTEST_GEOIP -DTEST_FIREWALL -Fo$*.obj $**
	@echo

$(OBJ_DIR)\geoip_1.obj: geoip.c
	$(CC) -c $(CFLAGS) -DTEST_GEOIP -Fo$(OBJ_DIR)/geoip_1.obj $**
	@echo

#
# The rule for '$(LIBLOC_OBJ)' files with the butt-ugly Nmake
# syntax (no sane '%'-pattern rules in Nmake).
#
LIBLOC_CFLAGS = -I$(LIBLOC_ROOT)/src/loc/windows  \
                -I$(LIBLOC_ROOT)/src/fake-OpenSSL \
                -FI$(LIBLOC_ROOT)/src/fake-OpenSSL/openssl/applink.c

{$(LIBLOC_ROOT)\src}.c{$(OBJ_DIR)}.obj:
	$(CC) -c $(CFLAGS) $(LIBLOC_CFLAGS) -Fo$*.obj $<
	@echo

#
# The default fall-back rule for other .obj-files.
#
.c{$(OBJ_DIR)}.obj:
	$(CC) -c $(CFLAGS) -Fo$*.obj $<
	@echo

#
# Make a .def file for x64 (release or debug); remove the leading '_' and the
# '@x' suffixes.
#
wsock_trace_x64$(_D).def: wsock_trace.def Makefile.VC6
	echo ; This file has been generated by Makefile.vc6. DO NOT EDIT!      > $@
	echo ;                                                                >> $@
	sed -e "s/LIBRARY wsock_trace.dll/LIBRARY wsock_trace_x64$(_D).dll/"  \
	    -e "s/^ _\(.*\)@.*/ \1/g" < wsock_trace.def                       >> $@

#
# Make a .def file for x86 debug; replace 'wsock_trace.dll' with 'wsock_trace_d.dll'.
#
wsock_trace_d.def: wsock_trace.def Makefile.VC6
	echo ; This file has been generated by Makefile.vc6. DO NOT EDIT!                > $@
	echo ;                                                                          >> $@
	sed -e "s/LIBRARY wsock_trace.dll/LIBRARY wsock_trace_d.dll/" < wsock_trace.def >> $@

common.h: wsock_defs.h

$(OBJ_DIR)/asn.obj: asn.c common.h in_addr.h common.h   \
                    csv.h smartlist.h inet_util.h       \
                    in_addr.h init.h iana.h asn.h       \
                    $(LIBLOC_ROOT)/src/loc/libloc.h     \
                    $(LIBLOC_ROOT)/src/loc/compat.h     \
                    $(LIBLOC_ROOT)/src/loc/database.h   \
                    $(LIBLOC_ROOT)/src/loc/network.h    \
                    $(LIBLOC_ROOT)/src/loc/format.h     \
                    $(LIBLOC_ROOT)/src/loc/as.h         \
                    $(LIBLOC_ROOT)/src/loc/stringpool.h \
                    $(LIBLOC_ROOT)/src/loc/country.h    \
                    $(LIBLOC_ROOT)/src/loc/resolv.h     \
                    $(LIBLOC_ROOT)/src/loc/windows/syslog.h

$(OBJ_DIR)\common.obj:      common.c common.h smartlist.h init.h dump.h wsock_trace.rc
$(OBJ_DIR)\cpu.obj:         cpu.c common.h init.h cpu.h
$(OBJ_DIR)\csv.obj:         csv.c common.h init.h csv.h
$(OBJ_DIR)\dump.obj:        dump.c common.h in_addr.h init.h geoip.h smartlist.h \
                            idna.h inet_util.h hosts.h wsock_trace.h dnsbl.h dump.h
$(OBJ_DIR)\dnsbl.obj:       dnsbl.c dnsbl.h common.h init.h in_addr.h inet_util.h geoip.h smartlist.h
$(OBJ_DIR)\hosts.obj:       hosts.c common.h init.h smartlist.h in_addr.h hosts.h
$(OBJ_DIR)\geoip.obj:       geoip.c common.h smartlist.h init.h in_addr.h inet_util.h geoip.h

$(OBJ_DIR)/iana.obj:        iana.c common.h in_addr.h common.h csv.h smartlist.h asn.h \
                            inet_util.h in_addr.h init.h iana.h

$(OBJ_DIR)\idna.obj:        idna.c common.h init.h smartlist.h idna.h
$(OBJ_DIR)\inet_util.obj:   inet_util.c inet_util.h common.h init.h in_addr.h
$(OBJ_DIR)\init.obj:        init.c common.h wsock_trace.h wsock_trace_lua.h \
                            dnsbl.h dump.h geoip.h smartlist.h idna.h stkwalk.h \
                            overlap.h hosts.h cpu.h init.h
$(OBJ_DIR)\in_addr.obj:     in_addr.c common.h in_addr.h
$(OBJ_DIR)\overlap.obj:     overlap.c common.h init.h smartlist.h overlap.h
$(OBJ_DIR)\smartlist.obj:   smartlist.c common.h vm_dump.h smartlist.h
$(OBJ_DIR)\stkwalk.obj:     stkwalk.c common.h init.h stkwalk.h smartlist.h
$(OBJ_DIR)\test.obj:        test.c getopt.h
$(OBJ_DIR)\vm_dump.obj:     vm_dump.c common.h cpu.h vm_dump.h
$(OBJ_DIR)\wsock_trace.obj: wsock_trace.c common.h in_addr.h \
                            init.h cpu.h stkwalk.h smartlist.h \
                            overlap.h dump.h wsock_trace_lua.h \
                            wsock_trace.h wsock_hooks.c
$(OBJ_DIR)\ip2loc.obj:      ip2loc.c common.h init.h geoip.h smartlist.h in_addr.h

!if "$(USE_LUA)" == "1"
wsock_trace_lua.h:             \
  $(LUAJIT_ROOT)/src/lua.h     \
  $(LUAJIT_ROOT)/src/luaconf.h \
  $(LUAJIT_ROOT)/src/lualib.h  \
  $(LUAJIT_ROOT)/src/lua.h     \
  $(LUAJIT_ROOT)/src/lauxlib.h

$(OBJ_DIR)/wsock_trace_lua.obj: \
  wsock_trace_lua.c common.h    \
  init.h wsock_trace_lua.h      \
  $(LUAJIT_ROOT)/src/lua.h      \
  $(LUAJIT_ROOT)/src/luaconf.h  \
  $(LUAJIT_ROOT)/src/lualib.h   \
  $(LUAJIT_ROOT)/src/lua.h      \
  $(LUAJIT_ROOT)/src/lauxlib.h  \
  $(LUAJIT_ROOT)/src/lj_arch.h  \
  $(LUAJIT_ROOT)/src/lj_debug.h
!endif
